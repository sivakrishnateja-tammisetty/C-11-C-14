1. MEMEBER INITIALIZER LIST:

  *This is used to initialize data members of a classes.
  * Two ways are there to do this:
    * using {} ==> mostly prefer this
    * using ()


  *When we use initializer list in c++:
  
    *Initializing a reference type data memeber.
    *Initializing constant data member.
    *Initializing member objects which do not have default constructor.






    Eg: single member intializer list
    #include<iostream>
using namespace std;
class Base
{
    int a;
    public:
    Base(int x):a{x}{}
    void display()
    {
        cout<<a<<endl;
    }
};
int main()
{
    Base obj(2);
    obj.display();
    return 0;
    }




    Eg2: multiple member initializer list

    #include<iostream>
using namespace std;
class Base
{
    int a;int b;
    public:
    Base(int x,int y):a{x},b{y}{}
    void display()
    {
        cout<<a<<" "<<b<<endl;
    }
};
int main()
{
    Base obj(2,5);
    obj.display();
    return 0;
}




Eg3:

#include <iostream>
using namespace std;
 
class Test {
public:
int x,y;
Test(int a,int b):x{a},y{b} {}
};

class Test2:public Test
{
    public:
    int z;
    Test2(int m,int n,int o):z(m),Test(n,o){}
    void display()
{
    cout<<x<<" "<<y<<" "<<z<<endl;
}
};

int main()
{
    Test2 obj(2,3,8);
    obj.display();
    
  
    return 0;
}



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. SMART POINTERS:

 *Smart pointers in C++ are used to manage memory dynamically allocated by objects, and they can be thought of as "virtual assistants".
 * Smart pointers help us to avoid memory leaks and ensure that memory is properly cleaned up when it is no longer needed.



* SHARED POINTER:
  * In shared pointer more than one owner might have to manage the lifetime of the object in memory.
  * USAGE ==>shared pointer maintains a "reference count" which is incremented, when another shared pointer points to the same object.




Eg 1:
#include <iostream>
#include <memory>

int main() {
    
    std::shared_ptr<int> myInt = std::make_shared<int>(42);

   
    std::cout << "My integer is: " << *myInt << std::endl;

    
    std::shared_ptr<int> anotherInt = myInt;

   
    std::cout << "My other integer is: " << *anotherInt << std::endl;

    
    myInt.reset();

    
    std::cout << "My other integer is still: " << *anotherInt << std::endl;

    
    return 0;
}




Eg2:

#include <iostream>
#include <memory>

int main() {
    std::shared_ptr<int> sharedInt = std::make_shared<int>(42);

    // Another shared pointer sharing ownership of the same object
    std::shared_ptr<int> anotherSharedInt = sharedInt;

    std::cout << "sharedInt: " << *sharedInt << std::endl;
    std::cout << "anotherSharedInt: " << *anotherSharedInt << std::endl;   
    return 0;
}

Eg3:
#include <iostream>
#include <memory>
using namespace std;
class Rectangle
{
    int l,b,area;
    public:
    Rectangle (int len,int br):l{len},b{br}{}
    void display()
    {
        area=l*b;
        cout<<"Length :"<<l<<" breadth :"<<b<<endl;
        cout<<"Area :"<<area<<endl;
    }
};

int main() {
 shared_ptr<Rectangle>ptr1(new Rectangle(4,2));
 ptr1->display();
 shared_ptr<Rectangle>ptr2(ptr1);
 ptr2->display();
 cout<<"Reference_count :"<<ptr1.use_count()<<endl;
 cout<<"Reference_count :"<<ptr2.use_count()<<endl;
  
   return 0;
}









* UNIQUE POINTER:


  *Unique pointer is an object that owns another object & manages that other object through pointer.
  *The unique pointer has exclusive ownership of object it points to.
  *This means unique_ptr does not share its pointer with any another  unique_ptr. It cannot be copied to another unique_ptr has default constructor.




Eg:
#include <iostream>
#include <memory>
using namespace std;
class Rectangle
{
    int l,b,area;
    public:
    Rectangle (int len,int br):l{len},b{br}{}
    void display()
    {
        area=l*b;
        cout<<"Length :"<<l<<" breadth :"<<b<<endl;
        cout<<"Area :"<<area<<endl;
    }
};

int main() {
 unique_ptr<Rectangle>ptr1(new Rectangle(4,2));
 ptr1->display();
 unique_ptr<Rectangle>ptr2;
 ptr2=move(ptr1);
 ptr2->display();
  
   return 0;
}










* WEAK POINTER:
  * Weak pointer is a smart pointer that does not take ownership of an object but act as an observer.
  *It doesn't participate in reference count to delete an object or extend its lifetime.
  *weak pointers are mainly used to break the circular dependency that shared pointers create.








#include <iostream>
#include <memory>

class MyClass {
public:
    MyClass(int value) : data(value) {
        std::cout << "Constructing MyClass with value: " << value << std::endl;
    }

    void someMethod() {
        std::cout << "MyClass method called with data: " << data << std::endl;
    }

    ~MyClass() {
        std::cout << "Destructing MyClass with data: " << data << std::endl;
    }

private:
    int data;
};

int main() {
    std::shared_ptr<MyClass> sharedPtr = std::make_shared<MyClass>(42);

    // Creating a weak pointer from the shared pointer
    std::weak_ptr<MyClass> weakPtr = sharedPtr;

    if (!weakPtr.expired()) {
        // Access the object using the weak pointer
        std::shared_ptr<MyClass> sharedPtrFromWeak = weakPtr.lock();
        sharedPtrFromWeak->someMethod();
    } else {
        std::cout << "The object is no longer available." << std::endl;
    }

    // The shared pointer is still in scope, so the object is not deallocated
    return 0;
}



--------------------------------------------------------------------------------------------------------------------------------------------------

3. MOVE SEMANTICS AND RVALUE REFERENCES:

  *Move semantics and Rvalue references in C++ are used to improve the efficiency and performance of code when copying or moving objects.





Eg:

#include <iostream>
#include <vector>
class MyVector {
public:
    MyVector(std::vector<int> data) : data_(std::move(data)) {
        std::cout << "Created MyVector with " << data_.size() << " elements." << std::endl;
    }

    void display() const {
        std::cout << "MyVector contains " << data_.size() << " elements: ";
        for (const int& element : data_) {
            std::cout << element << " ";
        }
        std::cout << std::endl;
    }

private:
    std::vector<int> data_;
};

int main() {
    std::vector<int> originalData = {1, 2, 3, 4, 5};

    // Move the data from originalData to myVector using std::move
    MyVector myVector(std::move(originalData));

    // originalData is now in a valid but unspecified state
    // and should not be accessed after the move
    std::cout << "originalData size after the move: " << originalData.size() << std::endl;

    myVector.display();

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  

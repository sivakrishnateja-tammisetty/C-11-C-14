1. MEMEBER INITIALIZER LIST:

  *This is used to initialize data members of a classes.
  * Two ways are there to do this:
    * using {} ==> mostly prefer this
    * using ()


  *When we use initializer list in c++:
  
    *Initializing a reference type data memeber.
    *Initializing constant data member.
    *Initializing member objects which do not have default constructor.






    Eg: single member intializer list
    #include<iostream>
using namespace std;
class Base
{
    int a;
    public:
    Base(int x):a{x}{}
    void display()
    {
        cout<<a<<endl;
    }
};
int main()
{
    Base obj(2);
    obj.display();
    return 0;
    }




    Eg2: multiple member initializer list

    #include<iostream>
using namespace std;
class Base
{
    int a;int b;
    public:
    Base(int x,int y):a{x},b{y}{}
    void display()
    {
        cout<<a<<" "<<b<<endl;
    }
};
int main()
{
    Base obj(2,5);
    obj.display();
    return 0;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. SMART POINTERS:

 *Smart pointers in C++ are used to manage memory dynamically allocated by objects, and they can be thought of as "virtual assistants".
 * Smart pointers help us to avoid memory leaks and ensure that memory is properly cleaned up when it is no longer needed.



* SHARED POINTER:
  * In shared pointer more than one owner might have to manage the lifetime of the object in memory.




Eg 1:
#include <iostream>
#include <memory>

int main() {
    
    std::shared_ptr<int> myInt = std::make_shared<int>(42);

   
    std::cout << "My integer is: " << *myInt << std::endl;

    
    std::shared_ptr<int> anotherInt = myInt;

   
    std::cout << "My other integer is: " << *anotherInt << std::endl;

    
    myInt.reset();

    
    std::cout << "My other integer is still: " << *anotherInt << std::endl;

    
    return 0;
}




Eg2:

#include <iostream>
#include <memory>

int main() {
    std::shared_ptr<int> sharedInt = std::make_shared<int>(42);

    // Another shared pointer sharing ownership of the same object
    std::shared_ptr<int> anotherSharedInt = sharedInt;

    std::cout << "sharedInt: " << *sharedInt << std::endl;
    std::cout << "anotherSharedInt: " << *anotherSharedInt << std::endl;
   
   

    return 0;
}

  
